p1. program to reverse the digits of a given integer
p2. check whether an integer is a palindrome (if it reads the same forward as backward)
p3. program to divide two integers (dividend and divisor) without using the multiplication, division and mod operator
p4. calculate x raised to the power n.
p5. calculate factorial of a number
p6. check if a given string can be interpreted as a decimal number
p7. check if a given number is a Fibonacci number or not - it is done a loop.
p8. get the Excel column title that corresponds to a given column number (integer value)
p9. get the column number (integer value) that corresponds to a column title as it appears in an Excel sheet
p10. find the number of trailing zeroes in a given factorial.
p11. count the total number of digits 1 appearing in all positive integers less than or equal to a given integer n
p12. add repeatedly all digits of a given non-negative number until the result has only one digit
p13. check if a given integer is a power of three.
p14. For a non negative integer in the range 0 <= i <= n write a program to calculate the number of 1's in their binary representation and return them as an array.
p15. get the maximum product of a given integer after breaking the integer into the sum of at least two positive integers.
p16. Write a program to print numbers from 1 to an integer(N) in lexicographic order.
p17. find the nth digit of the number 1 to n?
p18. find the total number of full staircase rows that can be formed from a given number of dice.
p19. find the square root of a number using the Babylonian method.
p20. multiply two integers without using multiplication, division, bitwise operators, and loops.
p21. calculate the average (or mean) of a stream of given numbers
p22. count the numbers without the digit 7, from 1 to a given number.
p23. find next smallest palindrome of a given number.
p24. calculate e raised to the power of x using the sum of the first n terms of the Taylor Series.
p25. print all prime factors of a given number.
p26. check if a given number is a Fibonacci number or not - it is done using formula.
p27. multiply two numbers using bitwise operators.
p28. find the angle between the hour and minute hands.
p29. get the smallest number of square numbers that add up to an integer n.
p30. Write a program that accepts a number (n) and counts all numbers with unique digits of length x within a specified range.
p31. Write a program to calculate the largest number that can be generated by swapping just two digits at most once.
p32. Write a program to check whether a given integer can be expressed as the sum of any non-negative integer and its reverse. Return true otherwise false.
p33. Write a program to count the digits in a given number that divide it.
p34. Write a program that creates a multiplication table of size m x n using integers where 1 <= k <= m * n. Return the kth smallest element in the said multiplication table.
p35. Write a program that accepts an integer and find all prime factors of the integer.
p36. Write a program to count common factors of the two given integers.
p37. Write a program that counts the number of integers whose digits are unique from 1 and a given integer value.
p38. Accept a positive integer (n) from the user. Write a program that counts the number of positive integers from 1 to n whose digit sums are odd.
p39. Find the greatest common divisor (GCD) of two numbers.
p40. Find the least common multiple (LCM) of two numbers.
p41. Check if a given number is prime.
p42. Print the first n prime numbers.
p43. Search for an element in a sorted array using binary search.
p44. Find the maximum and minimum elements in an array.
p45. Reverse an array.
p46. Rotate an array by k positions.
p47. Find the sum of all elements in an array.
p48. Find the average of all elements in an array.
p49. Find the median of an array.
p50. Find the mode of an array.
p51. Find the sum of digits of a number.
p52. Check if a number is Armstrong
p53. Check if number is perfect square
p54. Write a program to convert temperature between Celsius and Fahrenheit.
p55. Write a program to calculate the simple interest and compound interest.
p56. Calculate the sum of divisors of a number
p57. Check if a number is a Kaprekar number
p58. Write a function that checks how many vowels are in a string.
p59. Write a function that checks if the string is base64.
p60. Write a function that checks if the string contains spaces.
p61. Find the GCD of an array of numbers.
p62. Calculate the nth triangular number. --  SCOT asta
p63. Determine if a number is a Harshad (Niven) number.
p64. Reaplce all spaces with the digit zero.
p65. Check if a number is a power of two. -- using while
p66. Check if two strings are anagrams of each other.
p67. Check if a number is a power of two -- using bitwase checking
p68. Replace all vowels in a string with a specific character.
p69. Find the second largest element in an array.
p70. Check if an array is sorted in ascending order.